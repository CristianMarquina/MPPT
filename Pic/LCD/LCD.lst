CCS PCM C Compiler, Version 4.104, 5967               15-Aug-20 22:49

               Filename: C:\Users\cmarq\Documents\Entrega\MPPT\Pic\LCD\LCD.lst

               ROM used: 2146 words (26%)
                         Largest free fragment is 2048
               RAM used: 61 (17%) at main() level
                         83 (23%) worst case
               Stack:    5 locations

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
.................... #INCLUDE <16f887.h> 
.................... //////// Standard Header file for the PIC16F887 device //////////////// 
.................... #device PIC16F887 
.................... #list 
....................  
.................... #device adc=10 
.................... #USE DELAY(CLOCK=4000000) 
*
0019:  MOVLW  62
001A:  MOVWF  04
001B:  BCF    03.7
001C:  MOVF   00,W
001D:  BTFSC  03.2
001E:  GOTO   02D
001F:  MOVLW  01
0020:  MOVWF  78
0021:  CLRF   77
0022:  DECFSZ 77,F
0023:  GOTO   022
0024:  DECFSZ 78,F
0025:  GOTO   021
0026:  MOVLW  4A
0027:  MOVWF  77
0028:  DECFSZ 77,F
0029:  GOTO   028
002A:  GOTO   02B
002B:  DECFSZ 00,F
002C:  GOTO   01F
002D:  RETURN
.................... #FUSES XT,NOPROTECT,NOWDT,NOBROWNOUT,NOPUT,NOLVP 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                     The following have special meaning:               //// 
.................... ////                      \f  Clear display                                //// 
.................... ////                      \n  Go to start of second line                   //// 
.................... ////                      \b  Move back one position                       //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    BOOLEAN enable;           // on to an I/O port to gain 
....................    BOOLEAN rs;               // access to the LCD pins. 
....................    BOOLEAN rw;               // The bits are allocated from 
....................    BOOLEAN unused;           // low order up.  ENABLE will 
....................    int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... BYTE lcd_read_nibble(void); 
....................  
.................... BYTE lcd_read_byte(void) 
.................... { 
....................    BYTE low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0041:  MOVLW  0F
0042:  BSF    03.5
0043:  ANDWF  08,W
0044:  IORLW  F0
0045:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0046:  BCF    03.5
0047:  BSF    08.2
....................    delay_cycles(1); 
0048:  NOP
....................    lcd_output_enable(1); 
0049:  BSF    08.0
....................    delay_cycles(1); 
004A:  NOP
....................    high = lcd_read_nibble(); 
004B:  CALL   03A
004C:  MOVF   78,W
004D:  MOVWF  69
....................        
....................    lcd_output_enable(0); 
004E:  BCF    08.0
....................    delay_cycles(1); 
004F:  NOP
....................    lcd_output_enable(1); 
0050:  BSF    08.0
....................    delay_us(1); 
0051:  NOP
....................    low = lcd_read_nibble(); 
0052:  CALL   03A
0053:  MOVF   78,W
0054:  MOVWF  68
....................        
....................    lcd_output_enable(0); 
0055:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0056:  MOVLW  0F
0057:  BSF    03.5
0058:  ANDWF  08,W
0059:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
005A:  BCF    03.5
005B:  SWAPF  69,W
005C:  MOVWF  77
005D:  MOVLW  F0
005E:  ANDWF  77,F
005F:  MOVF   77,W
0060:  IORWF  68,W
0061:  MOVWF  78
.................... } 
....................  
.................... BYTE lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    BYTE n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
003A:  MOVF   08,W
003B:  MOVWF  77
003C:  SWAPF  08,W
003D:  ANDLW  0F
003E:  MOVWF  78
....................   #endif 
.................... } 
003F:  RETURN
....................  
.................... void lcd_send_nibble(BYTE n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
002E:  SWAPF  69,W
002F:  ANDLW  F0
0030:  MOVWF  77
0031:  MOVLW  0F
0032:  ANDWF  08,W
0033:  IORWF  77,W
0034:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0035:  NOP
....................    lcd_output_enable(1); 
0036:  BSF    08.0
....................    delay_us(2); 
0037:  GOTO   038
....................    lcd_output_enable(0); 
0038:  BCF    08.0
.................... } 
0039:  RETURN
....................  
.................... void lcd_send_byte(BYTE address, BYTE n) 
.................... { 
....................    lcd_output_rs(0); 
*
0040:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0062:  MOVF   78,W
0063:  MOVWF  68
0064:  BTFSC  68.7
0065:  GOTO   041
....................    lcd_output_rs(address); 
0066:  BTFSS  66.0
0067:  BCF    08.1
0068:  BTFSC  66.0
0069:  BSF    08.1
....................    delay_cycles(1); 
006A:  NOP
....................    lcd_output_rw(0); 
006B:  BCF    08.2
....................    delay_cycles(1); 
006C:  NOP
....................    lcd_output_enable(0); 
006D:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
006E:  SWAPF  67,W
006F:  MOVWF  68
0070:  MOVLW  0F
0071:  ANDWF  68,F
0072:  MOVF   68,W
0073:  MOVWF  69
0074:  CALL   02E
....................    lcd_send_nibble(n & 0xf); 
0075:  MOVF   67,W
0076:  ANDLW  0F
0077:  MOVWF  68
0078:  MOVWF  69
0079:  CALL   02E
.................... } 
007A:  RETURN
....................  
.................... void lcd_init(void)  
.................... { 
....................    BYTE i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
007B:  MOVLW  0F
007C:  BSF    03.5
007D:  ANDWF  08,W
007E:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
007F:  BCF    08.0
....................    lcd_rs_tris(); 
0080:  BCF    08.1
....................    lcd_rw_tris(); 
0081:  BCF    08.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
0082:  BCF    03.5
0083:  BCF    08.1
....................    lcd_output_rw(0); 
0084:  BCF    08.2
....................    lcd_output_enable(0); 
0085:  BCF    08.0
....................      
....................    delay_ms(15); 
0086:  MOVLW  0F
0087:  MOVWF  62
0088:  CALL   019
....................    for(i=1;i<=3;++i) 
0089:  MOVLW  01
008A:  MOVWF  54
008B:  MOVF   54,W
008C:  SUBLW  03
008D:  BTFSS  03.0
008E:  GOTO   097
....................    { 
....................        lcd_send_nibble(3); 
008F:  MOVLW  03
0090:  MOVWF  69
0091:  CALL   02E
....................        delay_ms(5); 
0092:  MOVLW  05
0093:  MOVWF  62
0094:  CALL   019
....................    } 
0095:  INCF   54,F
0096:  GOTO   08B
....................      
....................    lcd_send_nibble(2); 
0097:  MOVLW  02
0098:  MOVWF  69
0099:  CALL   02E
....................    for(i=0;i<=3;++i) 
009A:  CLRF   54
009B:  MOVF   54,W
009C:  SUBLW  03
009D:  BTFSS  03.0
009E:  GOTO   0A8
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
009F:  MOVF   54,W
00A0:  CALL   004
00A1:  MOVWF  55
00A2:  CLRF   66
00A3:  MOVF   55,W
00A4:  MOVWF  67
00A5:  CALL   040
00A6:  INCF   54,F
00A7:  GOTO   09B
.................... } 
00A8:  BSF    0A.3
00A9:  BCF    0A.4
00AA:  GOTO   04A (RETURN)
....................  
.................... void lcd_gotoxy(BYTE x, BYTE y) 
.................... { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
00AB:  DECFSZ 63,W
00AC:  GOTO   0AE
00AD:  GOTO   0B1
....................       address=LCD_LINE_TWO; 
00AE:  MOVLW  40
00AF:  MOVWF  64
....................    else 
00B0:  GOTO   0B2
....................       address=0; 
00B1:  CLRF   64
....................       
....................    address+=x-1; 
00B2:  MOVLW  01
00B3:  SUBWF  62,W
00B4:  ADDWF  64,F
....................    lcd_send_byte(0,0x80|address); 
00B5:  MOVF   64,W
00B6:  IORLW  80
00B7:  MOVWF  65
00B8:  CLRF   66
00B9:  MOVF   65,W
00BA:  MOVWF  67
00BB:  CALL   040
.................... } 
00BC:  RETURN
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
00BD:  MOVF   61,W
00BE:  XORLW  0C
00BF:  BTFSC  03.2
00C0:  GOTO   0C8
00C1:  XORLW  06
00C2:  BTFSC  03.2
00C3:  GOTO   0D0
00C4:  XORLW  02
00C5:  BTFSC  03.2
00C6:  GOTO   0D6
00C7:  GOTO   0DB
....................       case '\f'   :  lcd_send_byte(0,1); 
00C8:  CLRF   66
00C9:  MOVLW  01
00CA:  MOVWF  67
00CB:  CALL   040
....................                      delay_ms(2); 
00CC:  MOVLW  02
00CD:  MOVWF  62
00CE:  CALL   019
....................                      break; 
00CF:  GOTO   0E1
....................                       
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00D0:  MOVLW  01
00D1:  MOVWF  62
00D2:  MOVLW  02
00D3:  MOVWF  63
00D4:  CALL   0AB
00D5:  GOTO   0E1
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00D6:  CLRF   66
00D7:  MOVLW  10
00D8:  MOVWF  67
00D9:  CALL   040
00DA:  GOTO   0E1
....................       
....................       default     : lcd_send_byte(1,c);     break; 
00DB:  MOVLW  01
00DC:  MOVWF  66
00DD:  MOVF   61,W
00DE:  MOVWF  67
00DF:  CALL   040
00E0:  GOTO   0E1
....................    } 
.................... } 
00E1:  RETURN
....................   
.................... char lcd_getc(BYTE x, BYTE y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
....................  
.................... #BYTE PORTA= 5 
.................... #BYTE PORTD= 8 
....................  
.................... long Vpvin;     //Lectura de la entrada para el voltaje de salida del arreglo de paneles 
.................... float Vpv;     //Almacena el voltaje de salida del arreglo de paneles 
.................... long Ipvin = 0;     //Lectura de la entrada para la corriente de salida del arreglo de paneles 
.................... float Ipv= 0; //Almacena la corriente de salida del arreglo de paneles 
.................... float Pvp= 0; //Almacena La potencia de salida del arreglo de paneles 
....................  
.................... const float VCC=5;// Voltaje de alimentacion del sensor de corriente 
.................... float  sensitivity =0.100;// sensibilidad del ACS712ELCTR-20A-T 
.................... const float QOV =   0.5 * VCC; 
.................... float voltage;//Voltaje que da la lectura de corriente 
.................... float voltage_raw; 
....................  
.................... long Vlin;     //Lectura de la entrada para el voltaje de salida del arreglo de paneles 
.................... float Vl;     //Almacena el voltaje de salida del arreglo de paneles 
.................... long Ilin = 0;     //Lectura de la entrada para la corriente de salida del arreglo de paneles 
.................... float Il= 0; //Almacena la corriente de salida del arreglo de paneles 
.................... float Pl= 0; //Almacena La potencia de salida del arreglo de paneles 
....................  
.................... float voltagel;//Voltaje que da la lectura de corriente 
.................... float voltage_rawl; 
....................  
....................  
.................... void main() 
.................... { 
*
0800:  CLRF   04
0801:  BCF    03.7
0802:  MOVLW  1F
0803:  ANDWF  03,F
0804:  CLRF   27
0805:  CLRF   26
0806:  CLRF   2B
0807:  CLRF   2A
0808:  CLRF   29
0809:  CLRF   28
080A:  CLRF   2F
080B:  CLRF   2E
080C:  CLRF   2D
080D:  CLRF   2C
080E:  MOVLW  CD
080F:  MOVWF  33
0810:  MOVLW  CC
0811:  MOVWF  32
0812:  MOVLW  4C
0813:  MOVWF  31
0814:  MOVLW  7B
0815:  MOVWF  30
0816:  CLRF   43
0817:  CLRF   42
0818:  CLRF   47
0819:  CLRF   46
081A:  CLRF   45
081B:  CLRF   44
081C:  CLRF   4B
081D:  CLRF   4A
081E:  CLRF   49
081F:  CLRF   48
0820:  BSF    03.5
0821:  BSF    03.6
0822:  MOVF   09,W
0823:  ANDLW  C0
0824:  MOVWF  09
0825:  BCF    03.6
0826:  BCF    1F.4
0827:  BCF    1F.5
0828:  MOVLW  00
0829:  BSF    03.6
082A:  MOVWF  08
082B:  BCF    03.5
082C:  CLRF   07
082D:  CLRF   08
082E:  CLRF   09
....................    set_tris_a(0b00001111);          //Pongo el RA0 como entrada 
082F:  MOVLW  0F
0830:  BSF    03.5
0831:  BCF    03.6
0832:  MOVWF  05
....................    set_tris_d(0);                   //Pongo el PuertoD como Salida 
0833:  MOVLW  00
0834:  MOVWF  08
....................    setup_adc_ports(all_analog);     //Pongo todo el puerto a analogo 
0835:  BSF    03.6
0836:  MOVF   09,W
0837:  ANDLW  C0
0838:  IORLW  1F
0839:  MOVWF  09
083A:  BCF    03.6
083B:  BCF    1F.4
083C:  BCF    1F.5
083D:  MOVLW  FF
083E:  BSF    03.6
083F:  MOVWF  08
....................    setup_adc(adc_clock_internal);   //Selecciono reloj interno para conversion 
0840:  BCF    03.5
0841:  BCF    03.6
0842:  BSF    1F.6
0843:  BSF    1F.7
0844:  BSF    03.5
0845:  BSF    1F.7
0846:  BCF    03.5
0847:  BSF    1F.0
....................    lcd_init();                      //Inicializo el LCD 
0848:  BCF    0A.3
0849:  GOTO   07B
084A:  BSF    0A.3
....................    lcd_putc("\f");                  //Borro el LCD 
084B:  MOVLW  0C
084C:  BSF    03.6
084D:  MOVWF  0D
084E:  MOVLW  00
084F:  MOVWF  0F
0850:  BCF    0A.3
0851:  BCF    03.6
0852:  GOTO   0E2
0853:  BSF    0A.3
....................     
....................    while(1) 
....................    { 
....................        set_adc_channel(0);          //Selecciono el canal 0 (RA0) 
0854:  MOVLW  00
0855:  MOVWF  78
0856:  MOVF   1F,W
0857:  ANDLW  C3
0858:  IORWF  78,W
0859:  MOVWF  1F
....................        Vpvin=read_adc();             //Guarde el dato de el voltaje de salida de los paneles 
085A:  BSF    1F.1
085B:  BTFSC  1F.1
085C:  GOTO   05B
085D:  BSF    03.5
085E:  MOVF   1E,W
085F:  BCF    03.5
0860:  MOVWF  20
0861:  MOVF   1E,W
0862:  MOVWF  21
....................        Vpv=  (Vpvin*5.0*42.0)/1023.0; 
0863:  MOVF   21,W
0864:  MOVWF  55
0865:  MOVF   20,W
0866:  MOVWF  54
0867:  BCF    0A.3
0868:  CALL   12A
0869:  BSF    0A.3
086A:  MOVF   7A,W
086B:  MOVWF  64
086C:  MOVF   79,W
086D:  MOVWF  63
086E:  MOVF   78,W
086F:  MOVWF  62
0870:  MOVF   77,W
0871:  MOVWF  61
0872:  CLRF   68
0873:  CLRF   67
0874:  MOVLW  20
0875:  MOVWF  66
0876:  MOVLW  81
0877:  MOVWF  65
0878:  BCF    0A.3
0879:  CALL   147
087A:  BSF    0A.3
087B:  MOVF   77,W
087C:  MOVWF  54
087D:  MOVF   78,W
087E:  MOVWF  55
087F:  MOVF   79,W
0880:  MOVWF  56
0881:  MOVF   7A,W
0882:  MOVWF  57
0883:  MOVWF  64
0884:  MOVF   56,W
0885:  MOVWF  63
0886:  MOVF   55,W
0887:  MOVWF  62
0888:  MOVF   54,W
0889:  MOVWF  61
088A:  CLRF   68
088B:  CLRF   67
088C:  MOVLW  28
088D:  MOVWF  66
088E:  MOVLW  84
088F:  MOVWF  65
0890:  BCF    0A.3
0891:  CALL   147
0892:  BSF    0A.3
0893:  MOVF   77,W
0894:  MOVWF  54
0895:  MOVF   78,W
0896:  MOVWF  55
0897:  MOVF   79,W
0898:  MOVWF  56
0899:  MOVF   7A,W
089A:  MOVWF  57
089B:  MOVWF  5B
089C:  MOVF   56,W
089D:  MOVWF  5A
089E:  MOVF   55,W
089F:  MOVWF  59
08A0:  MOVF   54,W
08A1:  MOVWF  58
08A2:  CLRF   5F
08A3:  MOVLW  C0
08A4:  MOVWF  5E
08A5:  MOVLW  7F
08A6:  MOVWF  5D
08A7:  MOVLW  88
08A8:  MOVWF  5C
08A9:  BCF    0A.3
08AA:  CALL   1BC
08AB:  BSF    0A.3
08AC:  MOVF   7A,W
08AD:  MOVWF  25
08AE:  MOVF   79,W
08AF:  MOVWF  24
08B0:  MOVF   78,W
08B1:  MOVWF  23
08B2:  MOVF   77,W
08B3:  MOVWF  22
....................         
....................        lcd_gotoxy(1,1);             //Ubiquese en la posicion 2,2 
08B4:  MOVLW  01
08B5:  MOVWF  62
08B6:  MOVWF  63
08B7:  BCF    0A.3
08B8:  CALL   0AB
08B9:  BSF    0A.3
....................        printf(lcd_putc,"Vpv=%f",Vpv);  //Muestra el valor del voltaje de salida de arreglo de los paneles 
08BA:  MOVLW  0D
08BB:  BSF    03.6
08BC:  MOVWF  0D
08BD:  MOVLW  00
08BE:  MOVWF  0F
08BF:  BCF    03.0
08C0:  MOVLW  04
08C1:  BCF    03.6
08C2:  MOVWF  54
08C3:  BCF    0A.3
08C4:  CALL   286
08C5:  BSF    0A.3
08C6:  MOVLW  89
08C7:  MOVWF  04
08C8:  MOVF   25,W
08C9:  MOVWF  57
08CA:  MOVF   24,W
08CB:  MOVWF  56
08CC:  MOVF   23,W
08CD:  MOVWF  55
08CE:  MOVF   22,W
08CF:  MOVWF  54
08D0:  MOVLW  02
08D1:  MOVWF  58
08D2:  BCF    0A.3
08D3:  CALL   316
08D4:  BSF    0A.3
....................         
....................        set_adc_channel(1);          //Selecciono el canal 1 (RA1) 
08D5:  MOVLW  04
08D6:  MOVWF  78
08D7:  MOVF   1F,W
08D8:  ANDLW  C3
08D9:  IORWF  78,W
08DA:  MOVWF  1F
....................        Ipvin=read_adc();  
08DB:  BSF    1F.1
08DC:  BTFSC  1F.1
08DD:  GOTO   0DC
08DE:  BSF    03.5
08DF:  MOVF   1E,W
08E0:  BCF    03.5
08E1:  MOVWF  26
08E2:  MOVF   1E,W
08E3:  MOVWF  27
....................        voltage_raw =   (5.0 / 1023.0)* Ipvin;// Lee voltaje del sensor de corriente 
08E4:  MOVF   27,W
08E5:  MOVWF  55
08E6:  MOVF   26,W
08E7:  MOVWF  54
08E8:  BCF    0A.3
08E9:  CALL   12A
08EA:  BSF    0A.3
08EB:  MOVLW  0A
08EC:  MOVWF  64
08ED:  MOVLW  28
08EE:  MOVWF  63
08EF:  MOVLW  20
08F0:  MOVWF  62
08F1:  MOVLW  77
08F2:  MOVWF  61
08F3:  MOVF   7A,W
08F4:  MOVWF  68
08F5:  MOVF   79,W
08F6:  MOVWF  67
08F7:  MOVF   78,W
08F8:  MOVWF  66
08F9:  MOVF   77,W
08FA:  MOVWF  65
08FB:  BCF    0A.3
08FC:  CALL   147
08FD:  BSF    0A.3
08FE:  MOVF   7A,W
08FF:  MOVWF  3B
0900:  MOVF   79,W
0901:  MOVWF  3A
0902:  MOVF   78,W
0903:  MOVWF  39
0904:  MOVF   77,W
0905:  MOVWF  38
....................        voltage =  voltage_raw - QOV + 0.012 ; 
0906:  BSF    03.1
0907:  MOVF   3B,W
0908:  MOVWF  5B
0909:  MOVF   3A,W
090A:  MOVWF  5A
090B:  MOVF   39,W
090C:  MOVWF  59
090D:  MOVF   38,W
090E:  MOVWF  58
090F:  CLRF   5F
0910:  CLRF   5E
0911:  MOVLW  20
0912:  MOVWF  5D
0913:  MOVLW  80
0914:  MOVWF  5C
0915:  BCF    0A.3
0916:  CALL   3FD
0917:  BSF    0A.3
0918:  MOVF   77,W
0919:  MOVWF  54
091A:  MOVF   78,W
091B:  MOVWF  55
091C:  MOVF   79,W
091D:  MOVWF  56
091E:  MOVF   7A,W
091F:  MOVWF  57
0920:  BCF    03.1
0921:  MOVF   57,W
0922:  MOVWF  5B
0923:  MOVF   56,W
0924:  MOVWF  5A
0925:  MOVF   55,W
0926:  MOVWF  59
0927:  MOVF   54,W
0928:  MOVWF  58
0929:  MOVLW  A6
092A:  MOVWF  5F
092B:  MOVLW  9B
092C:  MOVWF  5E
092D:  MOVLW  44
092E:  MOVWF  5D
092F:  MOVLW  78
0930:  MOVWF  5C
0931:  BCF    0A.3
0932:  CALL   3FD
0933:  BSF    0A.3
0934:  MOVF   7A,W
0935:  MOVWF  37
0936:  MOVF   79,W
0937:  MOVWF  36
0938:  MOVF   78,W
0939:  MOVWF  35
093A:  MOVF   77,W
093B:  MOVWF  34
....................        Ipv = voltage / sensitivity; 
093C:  MOVF   37,W
093D:  MOVWF  5B
093E:  MOVF   36,W
093F:  MOVWF  5A
0940:  MOVF   35,W
0941:  MOVWF  59
0942:  MOVF   34,W
0943:  MOVWF  58
0944:  MOVF   33,W
0945:  MOVWF  5F
0946:  MOVF   32,W
0947:  MOVWF  5E
0948:  MOVF   31,W
0949:  MOVWF  5D
094A:  MOVF   30,W
094B:  MOVWF  5C
094C:  BCF    0A.3
094D:  CALL   1BC
094E:  BSF    0A.3
094F:  MOVF   7A,W
0950:  MOVWF  2B
0951:  MOVF   79,W
0952:  MOVWF  2A
0953:  MOVF   78,W
0954:  MOVWF  29
0955:  MOVF   77,W
0956:  MOVWF  28
....................        lcd_gotoxy(12,1);             //Ubiquese en la posicion 13,1 
0957:  MOVLW  0C
0958:  MOVWF  62
0959:  MOVLW  01
095A:  MOVWF  63
095B:  BCF    0A.3
095C:  CALL   0AB
095D:  BSF    0A.3
....................        printf(lcd_putc,"Ipv=%f",Ipv);  //Muestra el valor de La corriente de salida de arreglo de los paneles 
095E:  MOVLW  11
095F:  BSF    03.6
0960:  MOVWF  0D
0961:  MOVLW  00
0962:  MOVWF  0F
0963:  BCF    03.0
0964:  MOVLW  04
0965:  BCF    03.6
0966:  MOVWF  54
0967:  BCF    0A.3
0968:  CALL   286
0969:  BSF    0A.3
096A:  MOVLW  89
096B:  MOVWF  04
096C:  MOVF   2B,W
096D:  MOVWF  57
096E:  MOVF   2A,W
096F:  MOVWF  56
0970:  MOVF   29,W
0971:  MOVWF  55
0972:  MOVF   28,W
0973:  MOVWF  54
0974:  MOVLW  02
0975:  MOVWF  58
0976:  BCF    0A.3
0977:  CALL   316
0978:  BSF    0A.3
....................         
....................        Pvp=Ipv*Vpv; 
0979:  MOVF   2B,W
097A:  MOVWF  64
097B:  MOVF   2A,W
097C:  MOVWF  63
097D:  MOVF   29,W
097E:  MOVWF  62
097F:  MOVF   28,W
0980:  MOVWF  61
0981:  MOVF   25,W
0982:  MOVWF  68
0983:  MOVF   24,W
0984:  MOVWF  67
0985:  MOVF   23,W
0986:  MOVWF  66
0987:  MOVF   22,W
0988:  MOVWF  65
0989:  BCF    0A.3
098A:  CALL   147
098B:  BSF    0A.3
098C:  MOVF   7A,W
098D:  MOVWF  2F
098E:  MOVF   79,W
098F:  MOVWF  2E
0990:  MOVF   78,W
0991:  MOVWF  2D
0992:  MOVF   77,W
0993:  MOVWF  2C
....................        lcd_gotoxy(6,2);             //Ubiquese en la posicion 7,2 
0994:  MOVLW  06
0995:  MOVWF  62
0996:  MOVLW  02
0997:  MOVWF  63
0998:  BCF    0A.3
0999:  CALL   0AB
099A:  BSF    0A.3
....................        printf(lcd_putc,"Pvp=%f",Pvp);  //Muestra el valor de La potencia de salida de arreglo de los paneles 
099B:  MOVLW  15
099C:  BSF    03.6
099D:  MOVWF  0D
099E:  MOVLW  00
099F:  MOVWF  0F
09A0:  BCF    03.0
09A1:  MOVLW  04
09A2:  BCF    03.6
09A3:  MOVWF  54
09A4:  BCF    0A.3
09A5:  CALL   286
09A6:  BSF    0A.3
09A7:  MOVLW  89
09A8:  MOVWF  04
09A9:  MOVF   2F,W
09AA:  MOVWF  57
09AB:  MOVF   2E,W
09AC:  MOVWF  56
09AD:  MOVF   2D,W
09AE:  MOVWF  55
09AF:  MOVF   2C,W
09B0:  MOVWF  54
09B1:  MOVLW  02
09B2:  MOVWF  58
09B3:  BCF    0A.3
09B4:  CALL   316
09B5:  BSF    0A.3
....................         
....................         
....................        set_adc_channel(2);          //Selecciono el canal 0 (RA2) 
09B6:  MOVLW  08
09B7:  MOVWF  78
09B8:  MOVF   1F,W
09B9:  ANDLW  C3
09BA:  IORWF  78,W
09BB:  MOVWF  1F
....................        Vlin=read_adc();             //Guarde el dato de el voltaje de la carga 
09BC:  BSF    1F.1
09BD:  BTFSC  1F.1
09BE:  GOTO   1BD
09BF:  BSF    03.5
09C0:  MOVF   1E,W
09C1:  BCF    03.5
09C2:  MOVWF  3C
09C3:  MOVF   1E,W
09C4:  MOVWF  3D
....................        Vl=  (Vlin*5.0*100.0)/1023.0; 
09C5:  MOVF   3D,W
09C6:  MOVWF  55
09C7:  MOVF   3C,W
09C8:  MOVWF  54
09C9:  BCF    0A.3
09CA:  CALL   12A
09CB:  BSF    0A.3
09CC:  MOVF   7A,W
09CD:  MOVWF  64
09CE:  MOVF   79,W
09CF:  MOVWF  63
09D0:  MOVF   78,W
09D1:  MOVWF  62
09D2:  MOVF   77,W
09D3:  MOVWF  61
09D4:  CLRF   68
09D5:  CLRF   67
09D6:  MOVLW  20
09D7:  MOVWF  66
09D8:  MOVLW  81
09D9:  MOVWF  65
09DA:  BCF    0A.3
09DB:  CALL   147
09DC:  BSF    0A.3
09DD:  MOVF   77,W
09DE:  MOVWF  54
09DF:  MOVF   78,W
09E0:  MOVWF  55
09E1:  MOVF   79,W
09E2:  MOVWF  56
09E3:  MOVF   7A,W
09E4:  MOVWF  57
09E5:  MOVWF  64
09E6:  MOVF   56,W
09E7:  MOVWF  63
09E8:  MOVF   55,W
09E9:  MOVWF  62
09EA:  MOVF   54,W
09EB:  MOVWF  61
09EC:  CLRF   68
09ED:  CLRF   67
09EE:  MOVLW  48
09EF:  MOVWF  66
09F0:  MOVLW  85
09F1:  MOVWF  65
09F2:  BCF    0A.3
09F3:  CALL   147
09F4:  BSF    0A.3
09F5:  MOVF   77,W
09F6:  MOVWF  54
09F7:  MOVF   78,W
09F8:  MOVWF  55
09F9:  MOVF   79,W
09FA:  MOVWF  56
09FB:  MOVF   7A,W
09FC:  MOVWF  57
09FD:  MOVWF  5B
09FE:  MOVF   56,W
09FF:  MOVWF  5A
0A00:  MOVF   55,W
0A01:  MOVWF  59
0A02:  MOVF   54,W
0A03:  MOVWF  58
0A04:  CLRF   5F
0A05:  MOVLW  C0
0A06:  MOVWF  5E
0A07:  MOVLW  7F
0A08:  MOVWF  5D
0A09:  MOVLW  88
0A0A:  MOVWF  5C
0A0B:  BCF    0A.3
0A0C:  CALL   1BC
0A0D:  BSF    0A.3
0A0E:  MOVF   7A,W
0A0F:  MOVWF  41
0A10:  MOVF   79,W
0A11:  MOVWF  40
0A12:  MOVF   78,W
0A13:  MOVWF  3F
0A14:  MOVF   77,W
0A15:  MOVWF  3E
....................         
....................        lcd_gotoxy(21,1);             //Ubiquese en la posicion 3,1 
0A16:  MOVLW  15
0A17:  MOVWF  62
0A18:  MOVLW  01
0A19:  MOVWF  63
0A1A:  BCF    0A.3
0A1B:  CALL   0AB
0A1C:  BSF    0A.3
....................        printf(lcd_putc,"Vl=%f",Vl);  //Muestra el valor del voltaje de la carga 
0A1D:  MOVLW  56
0A1E:  MOVWF  61
0A1F:  BCF    0A.3
0A20:  CALL   0BD
0A21:  BSF    0A.3
0A22:  MOVLW  6C
0A23:  MOVWF  61
0A24:  BCF    0A.3
0A25:  CALL   0BD
0A26:  BSF    0A.3
0A27:  MOVLW  3D
0A28:  MOVWF  61
0A29:  BCF    0A.3
0A2A:  CALL   0BD
0A2B:  BSF    0A.3
0A2C:  MOVLW  89
0A2D:  MOVWF  04
0A2E:  MOVF   41,W
0A2F:  MOVWF  57
0A30:  MOVF   40,W
0A31:  MOVWF  56
0A32:  MOVF   3F,W
0A33:  MOVWF  55
0A34:  MOVF   3E,W
0A35:  MOVWF  54
0A36:  MOVLW  02
0A37:  MOVWF  58
0A38:  BCF    0A.3
0A39:  CALL   316
0A3A:  BSF    0A.3
....................         
....................        set_adc_channel(3);          //Selecciono el canal 1 (RA3) 
0A3B:  MOVLW  0C
0A3C:  MOVWF  78
0A3D:  MOVF   1F,W
0A3E:  ANDLW  C3
0A3F:  IORWF  78,W
0A40:  MOVWF  1F
....................        Ilin=read_adc();  
0A41:  BSF    1F.1
0A42:  BTFSC  1F.1
0A43:  GOTO   242
0A44:  BSF    03.5
0A45:  MOVF   1E,W
0A46:  BCF    03.5
0A47:  MOVWF  42
0A48:  MOVF   1E,W
0A49:  MOVWF  43
....................        voltage_rawl =   (5.0 / 1023.0)* Ilin;// Lee voltaje del sensor de corriente para la carga 
0A4A:  MOVF   43,W
0A4B:  MOVWF  55
0A4C:  MOVF   42,W
0A4D:  MOVWF  54
0A4E:  BCF    0A.3
0A4F:  CALL   12A
0A50:  BSF    0A.3
0A51:  MOVLW  0A
0A52:  MOVWF  64
0A53:  MOVLW  28
0A54:  MOVWF  63
0A55:  MOVLW  20
0A56:  MOVWF  62
0A57:  MOVLW  77
0A58:  MOVWF  61
0A59:  MOVF   7A,W
0A5A:  MOVWF  68
0A5B:  MOVF   79,W
0A5C:  MOVWF  67
0A5D:  MOVF   78,W
0A5E:  MOVWF  66
0A5F:  MOVF   77,W
0A60:  MOVWF  65
0A61:  BCF    0A.3
0A62:  CALL   147
0A63:  BSF    0A.3
0A64:  MOVF   7A,W
0A65:  MOVWF  53
0A66:  MOVF   79,W
0A67:  MOVWF  52
0A68:  MOVF   78,W
0A69:  MOVWF  51
0A6A:  MOVF   77,W
0A6B:  MOVWF  50
....................        voltagel =  voltage_rawl - QOV + 0.012 ; 
0A6C:  BSF    03.1
0A6D:  MOVF   53,W
0A6E:  MOVWF  5B
0A6F:  MOVF   52,W
0A70:  MOVWF  5A
0A71:  MOVF   51,W
0A72:  MOVWF  59
0A73:  MOVF   50,W
0A74:  MOVWF  58
0A75:  CLRF   5F
0A76:  CLRF   5E
0A77:  MOVLW  20
0A78:  MOVWF  5D
0A79:  MOVLW  80
0A7A:  MOVWF  5C
0A7B:  BCF    0A.3
0A7C:  CALL   3FD
0A7D:  BSF    0A.3
0A7E:  MOVF   77,W
0A7F:  MOVWF  54
0A80:  MOVF   78,W
0A81:  MOVWF  55
0A82:  MOVF   79,W
0A83:  MOVWF  56
0A84:  MOVF   7A,W
0A85:  MOVWF  57
0A86:  BCF    03.1
0A87:  MOVF   57,W
0A88:  MOVWF  5B
0A89:  MOVF   56,W
0A8A:  MOVWF  5A
0A8B:  MOVF   55,W
0A8C:  MOVWF  59
0A8D:  MOVF   54,W
0A8E:  MOVWF  58
0A8F:  MOVLW  A6
0A90:  MOVWF  5F
0A91:  MOVLW  9B
0A92:  MOVWF  5E
0A93:  MOVLW  44
0A94:  MOVWF  5D
0A95:  MOVLW  78
0A96:  MOVWF  5C
0A97:  BCF    0A.3
0A98:  CALL   3FD
0A99:  BSF    0A.3
0A9A:  MOVF   7A,W
0A9B:  MOVWF  4F
0A9C:  MOVF   79,W
0A9D:  MOVWF  4E
0A9E:  MOVF   78,W
0A9F:  MOVWF  4D
0AA0:  MOVF   77,W
0AA1:  MOVWF  4C
....................        Il = voltagel / sensitivity; 
0AA2:  MOVF   4F,W
0AA3:  MOVWF  5B
0AA4:  MOVF   4E,W
0AA5:  MOVWF  5A
0AA6:  MOVF   4D,W
0AA7:  MOVWF  59
0AA8:  MOVF   4C,W
0AA9:  MOVWF  58
0AAA:  MOVF   33,W
0AAB:  MOVWF  5F
0AAC:  MOVF   32,W
0AAD:  MOVWF  5E
0AAE:  MOVF   31,W
0AAF:  MOVWF  5D
0AB0:  MOVF   30,W
0AB1:  MOVWF  5C
0AB2:  BCF    0A.3
0AB3:  CALL   1BC
0AB4:  BSF    0A.3
0AB5:  MOVF   7A,W
0AB6:  MOVWF  47
0AB7:  MOVF   79,W
0AB8:  MOVWF  46
0AB9:  MOVF   78,W
0ABA:  MOVWF  45
0ABB:  MOVF   77,W
0ABC:  MOVWF  44
....................        lcd_gotoxy(32,1);             //Ubiquese en la posicion 12,3 
0ABD:  MOVLW  20
0ABE:  MOVWF  62
0ABF:  MOVLW  01
0AC0:  MOVWF  63
0AC1:  BCF    0A.3
0AC2:  CALL   0AB
0AC3:  BSF    0A.3
....................        printf(lcd_putc,"Il=%f",Il);  //Muestra el valor de La corriente de la carga 
0AC4:  MOVLW  49
0AC5:  MOVWF  61
0AC6:  BCF    0A.3
0AC7:  CALL   0BD
0AC8:  BSF    0A.3
0AC9:  MOVLW  6C
0ACA:  MOVWF  61
0ACB:  BCF    0A.3
0ACC:  CALL   0BD
0ACD:  BSF    0A.3
0ACE:  MOVLW  3D
0ACF:  MOVWF  61
0AD0:  BCF    0A.3
0AD1:  CALL   0BD
0AD2:  BSF    0A.3
0AD3:  MOVLW  89
0AD4:  MOVWF  04
0AD5:  MOVF   47,W
0AD6:  MOVWF  57
0AD7:  MOVF   46,W
0AD8:  MOVWF  56
0AD9:  MOVF   45,W
0ADA:  MOVWF  55
0ADB:  MOVF   44,W
0ADC:  MOVWF  54
0ADD:  MOVLW  02
0ADE:  MOVWF  58
0ADF:  BCF    0A.3
0AE0:  CALL   316
0AE1:  BSF    0A.3
....................         
....................        Pl=Il*Vl; 
0AE2:  MOVF   47,W
0AE3:  MOVWF  64
0AE4:  MOVF   46,W
0AE5:  MOVWF  63
0AE6:  MOVF   45,W
0AE7:  MOVWF  62
0AE8:  MOVF   44,W
0AE9:  MOVWF  61
0AEA:  MOVF   41,W
0AEB:  MOVWF  68
0AEC:  MOVF   40,W
0AED:  MOVWF  67
0AEE:  MOVF   3F,W
0AEF:  MOVWF  66
0AF0:  MOVF   3E,W
0AF1:  MOVWF  65
0AF2:  BCF    0A.3
0AF3:  CALL   147
0AF4:  BSF    0A.3
0AF5:  MOVF   7A,W
0AF6:  MOVWF  4B
0AF7:  MOVF   79,W
0AF8:  MOVWF  4A
0AF9:  MOVF   78,W
0AFA:  MOVWF  49
0AFB:  MOVF   77,W
0AFC:  MOVWF  48
....................        lcd_gotoxy(28,2);             //Ubiquese en la posicion 7,4 
0AFD:  MOVLW  1C
0AFE:  MOVWF  62
0AFF:  MOVLW  02
0B00:  MOVWF  63
0B01:  BCF    0A.3
0B02:  CALL   0AB
0B03:  BSF    0A.3
....................        printf(lcd_putc,"Pl=%f",Pl);  //Muestra el valor de La potencia de salida de arreglo de los paneles 
0B04:  MOVLW  50
0B05:  MOVWF  61
0B06:  BCF    0A.3
0B07:  CALL   0BD
0B08:  BSF    0A.3
0B09:  MOVLW  6C
0B0A:  MOVWF  61
0B0B:  BCF    0A.3
0B0C:  CALL   0BD
0B0D:  BSF    0A.3
0B0E:  MOVLW  3D
0B0F:  MOVWF  61
0B10:  BCF    0A.3
0B11:  CALL   0BD
0B12:  BSF    0A.3
0B13:  MOVLW  89
0B14:  MOVWF  04
0B15:  MOVF   4B,W
0B16:  MOVWF  57
0B17:  MOVF   4A,W
0B18:  MOVWF  56
0B19:  MOVF   49,W
0B1A:  MOVWF  55
0B1B:  MOVF   48,W
0B1C:  MOVWF  54
0B1D:  MOVLW  02
0B1E:  MOVWF  58
0B1F:  BCF    0A.3
0B20:  CALL   316
0B21:  BSF    0A.3
....................         
....................    } 
0B22:  GOTO   054
.................... } 
0B23:  SLEEP

Configuration Fuses:
   Word  1: 2CF1   XT NOWDT NOPUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   NOWRT BORV40
