CCS PCM C Compiler, Version 4.104, 5967               10-Aug-20 21:39

               Filename: C:\Users\cmarq\Documents\Entrega\MPPT\Pic\ADC\ACD.lst

               ROM used: 940 words (11%)
                         Largest free fragment is 2048
               RAM used: 59 (16%) at main() level
                         75 (20%) worst case
               Stack:    1 locations

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   2A3
0003:  NOP
.................... #INCLUDE <16f887.h> 
.................... //////// Standard Header file for the PIC16F887 device //////////////// 
.................... #device PIC16F887 
.................... #list 
....................  
....................  
.................... #device adc=10 
.................... #USE DELAY(CLOCK=4000000) 
.................... #FUSES XT,NOPROTECT,NOWDT,NOBROWNOUT,NOPUT,NOLVP 
.................... #INCLUDE <LCD.C> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                     The following have special meaning:               //// 
.................... ////                      \f  Clear display                                //// 
.................... ////                      \n  Go to start of second line                   //// 
.................... ////                      \b  Move back one position                       //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    BOOLEAN enable;           // on to an I/O port to gain 
....................    BOOLEAN rs;               // access to the LCD pins. 
....................    BOOLEAN rw;               // The bits are allocated from 
....................    BOOLEAN unused;           // low order up.  ENABLE will 
....................    int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... BYTE lcd_read_nibble(void); 
....................  
.................... BYTE lcd_read_byte(void) 
.................... { 
....................    BYTE low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
....................    delay_cycles(1); 
....................    lcd_output_enable(1); 
....................    delay_cycles(1); 
....................    high = lcd_read_nibble(); 
....................        
....................    lcd_output_enable(0); 
....................    delay_cycles(1); 
....................    lcd_output_enable(1); 
....................    delay_us(1); 
....................    low = lcd_read_nibble(); 
....................        
....................    lcd_output_enable(0); 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
.................... } 
....................  
.................... BYTE lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    BYTE n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(BYTE n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
....................    lcd_output_enable(1); 
....................    delay_us(2); 
....................    lcd_output_enable(0); 
.................... } 
....................  
.................... void lcd_send_byte(BYTE address, BYTE n) 
.................... { 
....................    lcd_output_rs(0); 
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
....................    lcd_output_rs(address); 
....................    delay_cycles(1); 
....................    lcd_output_rw(0); 
....................    delay_cycles(1); 
....................    lcd_output_enable(0); 
....................    lcd_send_nibble(n >> 4); 
....................    lcd_send_nibble(n & 0xf); 
.................... } 
....................  
.................... void lcd_init(void)  
.................... { 
....................    BYTE i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
....................    lcd_rs_tris(); 
....................    lcd_rw_tris(); 
....................  #endif 
....................  
....................    lcd_output_rs(0); 
....................    lcd_output_rw(0); 
....................    lcd_output_enable(0); 
....................      
....................    delay_ms(15); 
....................    for(i=1;i<=3;++i) 
....................    { 
....................        lcd_send_nibble(3); 
....................        delay_ms(5); 
....................    } 
....................      
....................    lcd_send_nibble(2); 
....................    for(i=0;i<=3;++i) 
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
.................... } 
....................  
.................... void lcd_gotoxy(BYTE x, BYTE y) 
.................... { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
....................       address=LCD_LINE_TWO; 
....................    else 
....................       address=0; 
....................       
....................    address+=x-1; 
....................    lcd_send_byte(0,0x80|address); 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
....................       case '\f'   :  lcd_send_byte(0,1); 
....................                      delay_ms(2); 
....................                      break; 
....................                       
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
....................       
....................       default     : lcd_send_byte(1,c);     break; 
....................    } 
.................... } 
....................   
.................... char lcd_getc(BYTE x, BYTE y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
....................  
.................... #BYTE PORTA= 5 
.................... #BYTE PORTD= 8 
....................  
.................... #define SW PORTA,1 
.................... #define LED PORTB,0 
....................  
.................... #BYTE PORTB= 6 
....................  
.................... long Vpvin;     //Variable almacena los bits 
.................... float Vpv;     //Almacena la temperatura 
....................  
.................... float Ipvin ;        //variables de lectura nueva 
.................... float Ipv; 
.................... float Pv; 
.................... float dv; 
.................... float dp; 
.................... float di; 
....................  
.................... float voltage=0; 
.................... float voltage_raw=0; 
.................... float VCC= 5;// Voltaje de alimentacion del sensor de corriente 
.................... float  sensitivity =0.100;// sensibilidad del ACS712ELCTR-20A-T 
.................... float QOV =   0.5 * VCC;// set quiescent Output voltage of 0.5V 
....................  
.................... void main() 
.................... { 
02A3:  CLRF   04
02A4:  BCF    03.7
02A5:  MOVLW  1F
02A6:  ANDWF  03,F
02A7:  CLRF   41
02A8:  CLRF   40
02A9:  CLRF   3F
02AA:  CLRF   3E
02AB:  CLRF   45
02AC:  CLRF   44
02AD:  CLRF   43
02AE:  CLRF   42
02AF:  CLRF   49
02B0:  CLRF   48
02B1:  MOVLW  20
02B2:  MOVWF  47
02B3:  MOVLW  81
02B4:  MOVWF  46
02B5:  MOVLW  CD
02B6:  MOVWF  4D
02B7:  MOVLW  CC
02B8:  MOVWF  4C
02B9:  MOVLW  4C
02BA:  MOVWF  4B
02BB:  MOVLW  7B
02BC:  MOVWF  4A
02BD:  CLRF   55
02BE:  CLRF   54
02BF:  CLRF   53
02C0:  MOVLW  7E
02C1:  MOVWF  52
02C2:  MOVF   49,W
02C3:  MOVWF  59
02C4:  MOVF   48,W
02C5:  MOVWF  58
02C6:  MOVF   47,W
02C7:  MOVWF  57
02C8:  MOVF   46,W
02C9:  MOVWF  56
02CA:  CALL   021
02CB:  MOVF   7A,W
02CC:  MOVWF  51
02CD:  MOVF   79,W
02CE:  MOVWF  50
02CF:  MOVF   78,W
02D0:  MOVWF  4F
02D1:  MOVF   77,W
02D2:  MOVWF  4E
02D3:  BSF    03.5
02D4:  BSF    03.6
02D5:  MOVF   09,W
02D6:  ANDLW  C0
02D7:  MOVWF  09
02D8:  BCF    03.6
02D9:  BCF    1F.4
02DA:  BCF    1F.5
02DB:  MOVLW  00
02DC:  BSF    03.6
02DD:  MOVWF  08
02DE:  BCF    03.5
02DF:  CLRF   07
02E0:  CLRF   08
02E1:  CLRF   09
....................    
....................    SET_TRIS_B(0B11111110); 
02E2:  MOVLW  FE
02E3:  BSF    03.5
02E4:  BCF    03.6
02E5:  MOVWF  06
....................    set_tris_a(0b00000011);          //Pongo el RA0 como entrada 
02E6:  MOVLW  03
02E7:  MOVWF  05
....................    set_tris_d(0);                   //Pongo el PuertoD como Salida 
02E8:  MOVLW  00
02E9:  MOVWF  08
....................    setup_adc_ports(all_analog);     //Pongo todo el puerto a analogo 
02EA:  BSF    03.6
02EB:  MOVF   09,W
02EC:  ANDLW  C0
02ED:  IORLW  1F
02EE:  MOVWF  09
02EF:  BCF    03.6
02F0:  BCF    1F.4
02F1:  BCF    1F.5
02F2:  MOVLW  FF
02F3:  BSF    03.6
02F4:  MOVWF  08
....................    setup_adc(adc_clock_internal);   //Selecciono reloj interno para conversion 
02F5:  BCF    03.5
02F6:  BCF    03.6
02F7:  BSF    1F.6
02F8:  BSF    1F.7
02F9:  BSF    03.5
02FA:  BSF    1F.7
02FB:  BCF    03.5
02FC:  BSF    1F.0
....................    //lcd_init();                      //Inicializo el LCD 
....................    //lcd_putc("\f");                  //Borro el LCD 
....................     
....................    while(1) 
....................    { BIT_SET(LED); 
02FD:  BSF    06.0
....................     
....................        set_adc_channel(0);          //Selecciono el canal 0 (RA0) 
02FE:  MOVLW  00
02FF:  MOVWF  78
0300:  MOVF   1F,W
0301:  ANDLW  C3
0302:  IORWF  78,W
0303:  MOVWF  1F
....................        Vpvin=read_adc();             //Guarde el dato del LM en tempe 
0304:  BSF    1F.1
0305:  BTFSC  1F.1
0306:  GOTO   305
0307:  BSF    03.5
0308:  MOVF   1E,W
0309:  BCF    03.5
030A:  MOVWF  20
030B:  MOVF   1E,W
030C:  MOVWF  21
....................             
....................        Vpv=(Vpvin*5.0);              //Conversion de bits a temperatura 
030D:  MOVF   21,W
030E:  MOVWF  53
030F:  MOVF   20,W
0310:  MOVWF  52
0311:  CALL   004
0312:  MOVF   7A,W
0313:  MOVWF  55
0314:  MOVF   79,W
0315:  MOVWF  54
0316:  MOVF   78,W
0317:  MOVWF  53
0318:  MOVF   77,W
0319:  MOVWF  52
031A:  CLRF   59
031B:  CLRF   58
031C:  MOVLW  20
031D:  MOVWF  57
031E:  MOVLW  81
031F:  MOVWF  56
0320:  CALL   021
0321:  MOVF   7A,W
0322:  MOVWF  25
0323:  MOVF   79,W
0324:  MOVWF  24
0325:  MOVF   78,W
0326:  MOVWF  23
0327:  MOVF   77,W
0328:  MOVWF  22
....................        BIT_CLEAR(lED); 
0329:  BCF    06.0
....................       // lcd_gotoxy(1,1);             //Ubiquese en la posicion 1,1 
....................       // lcd_putc("V="); 
....................        //lcd_gotoxy(3,1);             //Ubiquese en la posicion 2,2 
....................       // printf(lcd_putc,"%f",Vpv);  //Muestra el valor numerico de la conversionconversion 
....................        set_adc_channel(1);          //Selecciono el canal 0 (RA0) 
032A:  MOVLW  04
032B:  MOVWF  78
032C:  MOVF   1F,W
032D:  ANDLW  C3
032E:  IORWF  78,W
032F:  MOVWF  1F
....................        Ipvin=read_adc();             //Guarde el dato del LM en tempe 
0330:  BSF    1F.1
0331:  BTFSC  1F.1
0332:  GOTO   331
0333:  MOVF   1E,W
0334:  MOVWF  7A
0335:  BSF    03.5
0336:  MOVF   1E,W
0337:  BCF    03.5
0338:  MOVWF  52
0339:  MOVF   1E,W
033A:  MOVWF  53
033B:  CALL   004
033C:  MOVF   7A,W
033D:  MOVWF  29
033E:  MOVF   79,W
033F:  MOVWF  28
0340:  MOVF   78,W
0341:  MOVWF  27
0342:  MOVF   77,W
0343:  MOVWF  26
....................        voltage_raw =   (5.0 / 1023.0)*Ipvin;// Read the voltage from sensor 
0344:  MOVLW  0A
0345:  MOVWF  55
0346:  MOVLW  28
0347:  MOVWF  54
0348:  MOVLW  20
0349:  MOVWF  53
034A:  MOVLW  77
034B:  MOVWF  52
034C:  MOVF   29,W
034D:  MOVWF  59
034E:  MOVF   28,W
034F:  MOVWF  58
0350:  MOVF   27,W
0351:  MOVWF  57
0352:  MOVF   26,W
0353:  MOVWF  56
0354:  CALL   021
0355:  MOVF   7A,W
0356:  MOVWF  45
0357:  MOVF   79,W
0358:  MOVWF  44
0359:  MOVF   78,W
035A:  MOVWF  43
035B:  MOVF   77,W
035C:  MOVWF  42
....................        voltage =  voltage_raw - QOV + 0.012 ;// 0.000 is a value to make voltage zero when there is no current 
035D:  BSF    03.1
035E:  MOVF   45,W
035F:  MOVWF  59
0360:  MOVF   44,W
0361:  MOVWF  58
0362:  MOVF   43,W
0363:  MOVWF  57
0364:  MOVF   42,W
0365:  MOVWF  56
0366:  MOVF   51,W
0367:  MOVWF  5D
0368:  MOVF   50,W
0369:  MOVWF  5C
036A:  MOVF   4F,W
036B:  MOVWF  5B
036C:  MOVF   4E,W
036D:  MOVWF  5A
036E:  CALL   096
036F:  MOVF   77,W
0370:  MOVWF  52
0371:  MOVF   78,W
0372:  MOVWF  53
0373:  MOVF   79,W
0374:  MOVWF  54
0375:  MOVF   7A,W
0376:  MOVWF  55
0377:  BCF    03.1
0378:  MOVF   7A,W
0379:  MOVWF  59
037A:  MOVF   79,W
037B:  MOVWF  58
037C:  MOVF   78,W
037D:  MOVWF  57
037E:  MOVF   77,W
037F:  MOVWF  56
0380:  MOVLW  A6
0381:  MOVWF  5D
0382:  MOVLW  9B
0383:  MOVWF  5C
0384:  MOVLW  44
0385:  MOVWF  5B
0386:  MOVLW  78
0387:  MOVWF  5A
0388:  CALL   096
0389:  MOVF   7A,W
038A:  MOVWF  41
038B:  MOVF   79,W
038C:  MOVWF  40
038D:  MOVF   78,W
038E:  MOVWF  3F
038F:  MOVF   77,W
0390:  MOVWF  3E
....................        Ipv = voltage / sensitivity; 
0391:  MOVF   41,W
0392:  MOVWF  55
0393:  MOVF   40,W
0394:  MOVWF  54
0395:  MOVF   3F,W
0396:  MOVWF  53
0397:  MOVF   3E,W
0398:  MOVWF  52
0399:  MOVF   4D,W
039A:  MOVWF  59
039B:  MOVF   4C,W
039C:  MOVWF  58
039D:  MOVF   4B,W
039E:  MOVWF  57
039F:  MOVF   4A,W
03A0:  MOVWF  56
03A1:  GOTO   1D7
03A2:  MOVF   7A,W
03A3:  MOVWF  2D
03A4:  MOVF   79,W
03A5:  MOVWF  2C
03A6:  MOVF   78,W
03A7:  MOVWF  2B
03A8:  MOVF   77,W
03A9:  MOVWF  2A
....................  
....................         
....................       // lcd_gotoxy(1,2);             //Ubiquese en la posicion 1,1 
....................       // lcd_putc("I="); 
....................       // lcd_gotoxy(3,2);             //Ubiquese en la posicion 2,2 
....................       // printf(lcd_putc,"%f",Ipv);  //Muestra el valor numerico de la conversionconversion 
....................    } 
03AA:  GOTO   2FD
.................... } 
03AB:  SLEEP

Configuration Fuses:
   Word  1: 2CF1   XT NOWDT NOPUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   NOWRT BORV40
